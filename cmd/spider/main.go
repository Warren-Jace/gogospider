package main

import (
	"bufio"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"spider-golang/config"
	"spider-golang/core"
)

var (
	targetURL       string
	mode            string
	maxDepth        int
	maxPages        int
	timeout         int
	workers         int
	cookieFile      string
	customHeaders   string
	proxy           string
	userAgent       string
	ignoreRobots    bool
	allowSubdomains bool
	outputDir       string
	chromePath      string
	enableFuzzing   bool
	fuzzParams      string
	fuzzDict        string
	configFile      string
	// v2.6 Êñ∞Â¢ûÔºöÊó•ÂøóÂíåÁõëÊéßÂèÇÊï∞
	logLevel        string
	logFile         string
	logFormat       string
	showMetrics     bool
	// v2.6 Êñ∞Â¢ûÔºöÊòìÁî®ÊÄßÂèÇÊï∞ÔºàÂÄüÈâ¥Á´ûÂìÅÔºâ
	useStdin        bool
	simpleMode      bool
	outputFormat    string
	showVersion     bool
	
	// üÜï v2.9 Êñ∞Â¢ûÔºö‰ºÅ‰∏öÁ∫ßÂäüËÉΩÂèÇÊï∞
	// JSONËæìÂá∫
	enableJSON      bool
	jsonMode        string
	outputFile      string
	includeAllFields bool
	
	// ÈÄüÁéáÊéßÂà∂
	enableRateLimit bool
	requestsPerSec  int
	burstSize       int
	minDelay        int
	maxDelay        int
	adaptiveRate    bool
	minRate         int
	maxRate         int
	
	// Â§ñÈÉ®Êï∞ÊçÆÊ∫ê
	enableWayback   bool
	enableVT        bool
	vtAPIKey        string
	enableCC        bool
	externalTimeout int
	
	// ScopeÊéßÂà∂
	includeDomains  string
	excludeDomains  string
	includePaths    string
	excludePaths    string
	includeRegex    string
	excludeRegex    string
	includeExt      string
	excludeExt      string
	
	// ÁÆ°ÈÅìÊ®°Âºè
	enablePipeline  bool
	quietMode       bool
)

func init() {
	flag.StringVar(&targetURL, "url", "", "ÁõÆÊ†áURLÔºàÂøÖÈúÄÔºâ")
	flag.StringVar(&mode, "mode", "smart", "Áà¨ÂèñÊ®°Âºè: static, dynamic, smartÔºàÈªòËÆ§Ôºâ")
	flag.IntVar(&maxDepth, "depth", 3, "ÊúÄÂ§ßÁà¨ÂèñÊ∑±Â∫¶")
	flag.IntVar(&maxPages, "max-pages", 100, "ÊúÄÂ§ßÁà¨ÂèñÈ°µÈù¢Êï∞")
	flag.IntVar(&timeout, "timeout", 30, "ËØ∑Ê±ÇË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºâ")
	flag.IntVar(&workers, "workers", 10, "Âπ∂ÂèëÂ∑•‰ΩúÁ∫øÁ®ãÊï∞")
	flag.StringVar(&cookieFile, "cookie-file", "", "CookieÊñá‰ª∂Ë∑ØÂæÑ")
	flag.StringVar(&customHeaders, "headers", "", "Ëá™ÂÆö‰πâHTTPÂ§¥ÔºàJSONÊ†ºÂºèÔºâ")
	flag.StringVar(&proxy, "proxy", "", "‰ª£ÁêÜÊúçÂä°Âô®Âú∞ÂùÄ")
	flag.StringVar(&userAgent, "user-agent", "", "Ëá™ÂÆö‰πâUser-Agent")
	flag.BoolVar(&ignoreRobots, "ignore-robots", false, "ÂøΩÁï•robots.txt")
	flag.BoolVar(&allowSubdomains, "allow-subdomains", false, "ÂÖÅËÆ∏Áà¨ÂèñÂ≠êÂüüÂêç")
	flag.StringVar(&outputDir, "output", "./", "ËæìÂá∫ÁõÆÂΩï")
	flag.StringVar(&chromePath, "chrome-path", "", "ChromeÊµèËßàÂô®Ë∑ØÂæÑ")
	flag.BoolVar(&enableFuzzing, "fuzz", false, "ÂêØÁî®ÂèÇÊï∞Ê®°Á≥äÊµãËØï")
	flag.StringVar(&fuzzParams, "fuzz-params", "", "Ë¶ÅfuzzÁöÑÂèÇÊï∞ÂàóË°®ÔºàÈÄóÂè∑ÂàÜÈöîÔºâ")
	flag.StringVar(&fuzzDict, "fuzz-dict", "", "FuzzÂ≠óÂÖ∏Êñá‰ª∂Ë∑ØÂæÑ")
	flag.StringVar(&configFile, "config", "", "ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ")
	// v2.6 Êñ∞Â¢ûÂèÇÊï∞
	flag.StringVar(&logLevel, "log-level", "info", "Êó•ÂøóÁ∫ßÂà´: debug, info, warn, error")
	flag.StringVar(&logFile, "log-file", "", "Êó•ÂøóÊñá‰ª∂Ë∑ØÂæÑÔºàÁ©∫Ë°®Á§∫ËæìÂá∫Âà∞ÊéßÂà∂Âè∞Ôºâ")
	flag.StringVar(&logFormat, "log-format", "json", "Êó•ÂøóÊ†ºÂºè: json, text")
	flag.BoolVar(&showMetrics, "show-metrics", false, "ÊòæÁ§∫ÂÆûÊó∂ÁõëÊéßÊåáÊ†á")
	// v2.6 Êñ∞Â¢ûÔºöÊòìÁî®ÊÄßÂèÇÊï∞ÔºàÂÄüÈâ¥ Hakrawler/KatanaÔºâ
	flag.BoolVar(&useStdin, "stdin", false, "‰ªéÊ†áÂáÜËæìÂÖ•ËØªÂèñURLÔºàÊîØÊåÅpipelineÔºâ")
	flag.BoolVar(&simpleMode, "simple", false, "ÁÆÄÊ¥ÅÊ®°ÂºèÔºàÂè™ËæìÂá∫URLÔºåÈÄÇÂêàpipelineÔºâ")
	flag.StringVar(&outputFormat, "format", "text", "ËæìÂá∫Ê†ºÂºè: text, json, urls-only")
	flag.BoolVar(&showVersion, "version", false, "ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ")
	
	// üÜï v2.9 Êñ∞Â¢ûÔºö‰ºÅ‰∏öÁ∫ßÂäüËÉΩÂèÇÊï∞
	// JSONËæìÂá∫ÂèÇÊï∞
	flag.BoolVar(&enableJSON, "json", false, "ÂêØÁî®JSONËæìÂá∫Ê†ºÂºè")
	flag.StringVar(&jsonMode, "json-mode", "line", "JSONÊ®°Âºè: compact, pretty, line")
	flag.StringVar(&outputFile, "output-file", "", "ËæìÂá∫Êñá‰ª∂Ë∑ØÂæÑÔºà‰∏∫Á©∫ÂàôËæìÂá∫Âà∞stdoutÔºâ")
	flag.BoolVar(&includeAllFields, "include-all", false, "JSONËæìÂá∫ÂåÖÂê´ÊâÄÊúâÂ≠óÊÆµ")
	
	// ÈÄüÁéáÊéßÂà∂ÂèÇÊï∞
	flag.BoolVar(&enableRateLimit, "rate-limit-enable", false, "ÂêØÁî®ÈÄüÁéáÈôêÂà∂")
	flag.IntVar(&requestsPerSec, "rate-limit", 100, "ÊØèÁßíÊúÄÂ§ßËØ∑Ê±ÇÊï∞ÔºàËÆæÁΩÆÂêéËá™Âä®ÂêØÁî®ÈÄüÁéáÈôêÂà∂Ôºâ")
	flag.IntVar(&burstSize, "burst", 10, "ÂÖÅËÆ∏ÁöÑÁ™ÅÂèëËØ∑Ê±ÇÊï∞")
	flag.IntVar(&minDelay, "min-delay", 0, "ÊúÄÂ∞èËØ∑Ê±ÇÈó¥ÈöîÔºàÊØ´ÁßíÔºâ")
	flag.IntVar(&maxDelay, "max-delay", 0, "ÊúÄÂ§ßËØ∑Ê±ÇÈó¥ÈöîÔºàÊØ´ÁßíÔºâ")
	flag.BoolVar(&adaptiveRate, "adaptive-rate", false, "ÂêØÁî®Ëá™ÈÄÇÂ∫îÈÄüÁéáÊéßÂà∂")
	flag.IntVar(&minRate, "min-rate", 10, "Ëá™ÈÄÇÂ∫îÊúÄÂ∞èÈÄüÁéá")
	flag.IntVar(&maxRate, "max-rate", 200, "Ëá™ÈÄÇÂ∫îÊúÄÂ§ßÈÄüÁéá")
	
	// Â§ñÈÉ®Êï∞ÊçÆÊ∫êÂèÇÊï∞
	flag.BoolVar(&enableWayback, "wayback", false, "‰ªéWayback MachineËé∑ÂèñÂéÜÂè≤URL")
	flag.BoolVar(&enableVT, "virustotal", false, "‰ªéVirusTotalËé∑ÂèñURL")
	flag.StringVar(&vtAPIKey, "vt-api-key", "", "VirusTotal APIÂØÜÈí•")
	flag.BoolVar(&enableCC, "commoncrawl", false, "‰ªéCommonCrawlËé∑ÂèñURL")
	flag.IntVar(&externalTimeout, "external-timeout", 30, "Â§ñÈÉ®Êï∞ÊçÆÊ∫êË∂ÖÊó∂ÔºàÁßíÔºâ")
	
	// ScopeÊéßÂà∂ÂèÇÊï∞
	flag.StringVar(&includeDomains, "include-domains", "", "ÂåÖÂê´ÁöÑÂüüÂêçÂàóË°®ÔºàÈÄóÂè∑ÂàÜÈöîÔºåÊîØÊåÅ*.example.comÔºâ")
	flag.StringVar(&excludeDomains, "exclude-domains", "", "ÊéíÈô§ÁöÑÂüüÂêçÂàóË°®ÔºàÈÄóÂè∑ÂàÜÈöîÔºâ")
	flag.StringVar(&includePaths, "include-paths", "", "ÂåÖÂê´ÁöÑË∑ØÂæÑÊ®°ÂºèÔºàÈÄóÂè∑ÂàÜÈöîÔºåÊîØÊåÅ/api/*Ôºâ")
	flag.StringVar(&excludePaths, "exclude-paths", "", "ÊéíÈô§ÁöÑË∑ØÂæÑÊ®°ÂºèÔºàÈÄóÂè∑ÂàÜÈöîÔºâ")
	flag.StringVar(&includeRegex, "include-regex", "", "ÂåÖÂê´ÁöÑURLÊ≠£ÂàôË°®ËææÂºè")
	flag.StringVar(&excludeRegex, "exclude-regex", "", "ÊéíÈô§ÁöÑURLÊ≠£ÂàôË°®ËææÂºè")
	flag.StringVar(&includeExt, "include-ext", "", "ÂåÖÂê´ÁöÑÊñá‰ª∂Êâ©Â±ïÂêçÔºàÈÄóÂè∑ÂàÜÈöîÔºâ")
	flag.StringVar(&excludeExt, "exclude-ext", "", "ÊéíÈô§ÁöÑÊñá‰ª∂Êâ©Â±ïÂêçÔºàÈÄóÂè∑ÂàÜÈöîÔºâ")
	
	// ÁÆ°ÈÅìÊ®°ÂºèÂèÇÊï∞
	flag.BoolVar(&enablePipeline, "pipeline", false, "ÂêØÁî®ÁÆ°ÈÅìÊ®°Âºè")
	flag.BoolVar(&quietMode, "quiet", false, "ÈùôÈªòÊ®°ÂºèÔºàÊó•ÂøóËæìÂá∫Âà∞stderrÔºâ")
}


func main() {
	// üîß ‰ºòÂåñÔºöÊ∑ªÂä†panicÊÅ¢Â§çÊú∫Âà∂
	defer func() {
		if r := recover(); r != nil {
			log.Printf("Á®ãÂ∫èpanic: %v", r)
			log.Printf("ËØ∑Êü•ÁúãÊó•ÂøóÊñá‰ª∂Êàñ‰ΩøÁî® -log-level debug Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ")
			os.Exit(1)
		}
	}()
	
	flag.Parse()

	// v2.6: Â§ÑÁêÜ version ÂëΩ‰ª§
	if showVersion {
		printVersion()
		os.Exit(0)
	}

	// v2.6: Â§ÑÁêÜ stdin Ê®°ÂºèÔºàÂÄüÈâ¥ HakrawlerÔºâ
	if useStdin {
		handleStdinMode()
		return
	}

	// ÁÆÄÊ¥ÅÊ®°Âºè‰∏ã‰∏çÊòæÁ§∫Ê®™ÂπÖ
	if !simpleMode {
		printBanner()
	}

	// üîß ‰ºòÂåñÔºöÂä†ËΩΩÈÖçÁΩÆÔºàÊîØÊåÅÈÖçÁΩÆÊñá‰ª∂Ôºâ
	var cfg *config.Config
	
	if configFile != "" {
		// ‰ªéÈÖçÁΩÆÊñá‰ª∂Âä†ËΩΩ
		loadedCfg, err := loadConfigFile(configFile)
		if err != nil {
			log.Fatalf("Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: %v", err)
		}
		cfg = loadedCfg
		if !simpleMode {
			fmt.Printf("[*] Â∑≤Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂: %s\n", configFile)
		}
	} else {
		// ‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ
		cfg = config.NewDefaultConfig()
	}

	// ÂëΩ‰ª§Ë°åÂèÇÊï∞Ë¶ÜÁõñÈÖçÁΩÆÊñá‰ª∂
	if targetURL != "" {
		cfg.TargetURL = targetURL
	}
	if maxDepth != 3 {
		cfg.DepthSettings.MaxDepth = maxDepth
	}
	if proxy != "" {
		cfg.AntiDetectionSettings.Proxies = []string{proxy}
	}
	if userAgent != "" {
		cfg.AntiDetectionSettings.UserAgents = []string{userAgent}
	}
	// ÂèÇÊï∞ÁàÜÁ†¥ÂäüËÉΩÂ∑≤ÁßªÈô§
	// if enableFuzzing {
	// 	cfg.StrategySettings.EnableParamFuzzing = true
	// 	cfg.StrategySettings.EnablePOSTParamFuzzing = true
	// }
	
	// v2.6: ÈÖçÁΩÆÊó•ÂøóËÆæÁΩÆ
	if logLevel != "info" {
		cfg.LogSettings.Level = strings.ToUpper(logLevel)
	}
	if logFile != "" {
		cfg.LogSettings.OutputFile = logFile
	}
	if logFormat != "json" {
		cfg.LogSettings.Format = logFormat
	}
	if showMetrics {
		cfg.LogSettings.ShowMetrics = true
	}
	
	// üÜï v2.9: Â∫îÁî®Êñ∞ÂäüËÉΩÂèÇÊï∞Âà∞ÈÖçÁΩÆ
	// JSONËæìÂá∫ÈÖçÁΩÆ
	if enableJSON {
		cfg.OutputSettings.Format = "json"
		cfg.OutputSettings.JSONMode = jsonMode
		cfg.OutputSettings.IncludeAll = includeAllFields
	}
	if outputFile != "" {
		cfg.OutputSettings.OutputFile = outputFile
	}
	
	// ÈÄüÁéáÊéßÂà∂ÈÖçÁΩÆ
	if requestsPerSec != 100 || enableRateLimit {
		cfg.RateLimitSettings.Enabled = true
		cfg.RateLimitSettings.RequestsPerSecond = requestsPerSec
	}
	if burstSize != 10 {
		cfg.RateLimitSettings.BurstSize = burstSize
	}
	if minDelay > 0 {
		cfg.RateLimitSettings.MinDelay = minDelay
	}
	if maxDelay > 0 {
		cfg.RateLimitSettings.MaxDelay = maxDelay
	}
	if adaptiveRate {
		cfg.RateLimitSettings.Adaptive = true
		cfg.RateLimitSettings.AdaptiveMinRate = minRate
		cfg.RateLimitSettings.AdaptiveMaxRate = maxRate
	}
	
	// Â§ñÈÉ®Êï∞ÊçÆÊ∫êÈÖçÁΩÆ
	if enableWayback || enableVT || enableCC {
		cfg.ExternalSourceSettings.Enabled = true
		cfg.ExternalSourceSettings.EnableWaybackMachine = enableWayback
		cfg.ExternalSourceSettings.EnableVirusTotal = enableVT
		cfg.ExternalSourceSettings.VirusTotalAPIKey = vtAPIKey
		cfg.ExternalSourceSettings.EnableCommonCrawl = enableCC
		cfg.ExternalSourceSettings.Timeout = externalTimeout
	}
	
	// ScopeÊéßÂà∂ÈÖçÁΩÆ
	if includeDomains != "" || excludeDomains != "" || includePaths != "" || 
	   excludePaths != "" || includeRegex != "" || excludeRegex != "" ||
	   includeExt != "" || excludeExt != "" {
		cfg.ScopeSettings.Enabled = true
		
		if includeDomains != "" {
			cfg.ScopeSettings.IncludeDomains = strings.Split(includeDomains, ",")
		}
		if excludeDomains != "" {
			cfg.ScopeSettings.ExcludeDomains = strings.Split(excludeDomains, ",")
		}
		if includePaths != "" {
			cfg.ScopeSettings.IncludePaths = strings.Split(includePaths, ",")
		}
		if excludePaths != "" {
			cfg.ScopeSettings.ExcludePaths = strings.Split(excludePaths, ",")
		}
		if includeRegex != "" {
			cfg.ScopeSettings.IncludeRegex = includeRegex
		}
		if excludeRegex != "" {
			cfg.ScopeSettings.ExcludeRegex = excludeRegex
		}
		if includeExt != "" {
			cfg.ScopeSettings.IncludeExtensions = strings.Split(includeExt, ",")
		}
		if excludeExt != "" {
			cfg.ScopeSettings.ExcludeExtensions = strings.Split(excludeExt, ",")
		}
	}
	
	// ÁÆ°ÈÅìÊ®°ÂºèÈÖçÁΩÆ
	if enablePipeline || useStdin {
		cfg.PipelineSettings.Enabled = true
		cfg.PipelineSettings.EnableStdin = useStdin || enablePipeline
		cfg.PipelineSettings.EnableStdout = true
		cfg.PipelineSettings.Quiet = quietMode
	}

	// ÂèÇÊï∞È™åËØÅ
	if cfg.TargetURL == "" {
		fmt.Println("ÈîôËØØ: ÂøÖÈ°ªÊåáÂÆöÁõÆÊ†áURL")
		flag.Usage()
		os.Exit(1)
	}
	
	// ÈÖçÁΩÆÈ™åËØÅÔºà‰ºòÂåñÔºöÁ°Æ‰øùÈÖçÁΩÆÊúâÊïàÔºâ
	if err := cfg.Validate(); err != nil {
		fmt.Printf("ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•: %v\n", err)
		os.Exit(1)
	}

	// ÂàõÂª∫Áà¨Ëô´ÂÆû‰æã
	spider := core.NewSpider(cfg)
	defer spider.Close() // Á°Æ‰øùËµÑÊ∫êÊ∏ÖÁêÜ

	// ÂêØÂä®Áà¨Âèñ
	fmt.Printf("\n[*] ÂºÄÂßãÁà¨Âèñ: %s\n", cfg.TargetURL)
	fmt.Printf("[*] ÊúÄÂ§ßÊ∑±Â∫¶: %d\n", cfg.DepthSettings.MaxDepth)
	fmt.Printf("[*] ÈùôÊÄÅÁà¨Ëô´: %v\n", cfg.StrategySettings.EnableStaticCrawler)
	fmt.Printf("[*] Âä®ÊÄÅÁà¨Ëô´: %v\n", cfg.StrategySettings.EnableDynamicCrawler)
	fmt.Printf("[*] Á∫ØÁà¨Ëô´Ê®°Âºè: ‰∏ìÊ≥®URLÂèëÁé∞ÔºàÂ∑≤Á¶ÅÁî®ÂèÇÊï∞ÁàÜÁ†¥Ôºâ\n")
	fmt.Println()

	startTime := time.Now()
	err := spider.Start(cfg.TargetURL)
	if err != nil {
		log.Fatalf("Áà¨ÂèñÂ§±Ë¥•: %v", err)
	}
	elapsed := time.Since(startTime)

	// Ëé∑ÂèñÁªìÊûú
	results := spider.GetResults()

	// ÁîüÊàêËæìÂá∫Êñá‰ª∂Âêç
	timestamp := time.Now().Format("20060102_150405")
	domain := extractDomain(cfg.TargetURL)
	baseFilename := fmt.Sprintf("spider_%s_%s", domain, timestamp)

	// ‰øùÂ≠òÁªìÊûú
	if err := saveResults(results, baseFilename+".txt"); err != nil {
		log.Printf("‰øùÂ≠òÁªìÊûúÂ§±Ë¥•: %v", err)
	}

	// ‰øùÂ≠òURLÂàóË°®ÔºàÊóßÁâàÔºå‰∏∫‰∫ÜÂÖºÂÆπÊÄß‰øùÁïôÔºâ
	if err := saveURLs(results, baseFilename+"_urls.txt"); err != nil {
		log.Printf("‰øùÂ≠òURLÂàóË°®Â§±Ë¥•: %v", err)
	}
	
	// ‰øùÂ≠òÊâÄÊúâÁ±ªÂûãÁöÑURLÂà∞‰∏çÂêåÊñá‰ª∂ÔºàÊñ∞Â¢ûÔºöÂ¢ûÂº∫ÁâàÔºâ
	if err := saveAllURLs(results, baseFilename); err != nil {
		log.Printf("‰øùÂ≠òÂàÜÁ±ªURLÂ§±Ë¥•: %v", err)
	}

	// üÜï v2.8: ‰øùÂ≠òÂéªÈáçÂêéÁöÑURLÔºàÂøΩÁï•ÂèÇÊï∞ÂÄºÔºâ
	uniqueURLFile := baseFilename + "_unique_urls.txt"
	if err := spider.SaveUniqueURLsToFile(uniqueURLFile); err != nil {
		log.Printf("‰øùÂ≠òÂéªÈáçURLÂ§±Ë¥•: %v", err)
	}
	
	// üÜï ÁªìÊûÑÂåñÂéªÈáç: ‰øùÂ≠òÁªìÊûÑÂåñÂéªÈáçÂêéÁöÑURLÔºàËØÜÂà´Ë∑ØÂæÑÂèòÈáè+ÂèÇÊï∞ÂÄºÔºâ
	// ÂÖàÊî∂ÈõÜÊâÄÊúâURLÂà∞ÁªìÊûÑÂåñÂéªÈáçÂô®
	spider.CollectAllURLsForStructureDedup()
	
	// ‰øùÂ≠òÁªìÊûÑÂåñÂéªÈáçÂêéÁöÑURL
	structureUniqueFile := baseFilename + "_structure_unique_urls.txt"
	if err := spider.SaveStructureUniqueURLsToFile(structureUniqueFile); err != nil {
		log.Printf("‰øùÂ≠òÁªìÊûÑÂåñÂéªÈáçURLÂ§±Ë¥•: %v", err)
	}
	
	// ÊâìÂç∞ÁªüËÆ°‰ø°ÊÅØ
	if !simpleMode {
		printStats(results, elapsed)
		
		// v2.9: ÊâìÂç∞URLÊ®°ÂºèÂéªÈáçÊä•Âëä
		spider.PrintURLPatternDedupReport()
		
		// v2.7: ÊâìÂç∞‰∏öÂä°ÊÑüÁü•ËøáÊª§Âô®Êä•Âëä
		spider.PrintBusinessFilterReport()
		
		// üÜï v2.8: ÊâìÂç∞URLÂéªÈáçÊä•Âëä
		spider.PrintURLDeduplicationReport()
		
		// üÜï ÁªìÊûÑÂåñÂéªÈáç: ÊâìÂç∞ÁªìÊûÑÂåñÂéªÈáçÊä•Âëä
		spider.PrintStructureDeduplicationReport()
		
		fmt.Printf("\n[+] ÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞ÂΩìÂâçÁõÆÂΩï\n")
	}
	
	// v2.6: Â§ÑÁêÜ‰∏çÂêåÁöÑËæìÂá∫Ê†ºÂºèÔºàÂÄüÈâ¥ KatanaÔºâ
	handleOutputFormat(results)
}

func printBanner() {
	banner := `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                ‚ïë
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó               ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù               ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó               ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë               ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù               ‚ïë
‚ïë                                                               ‚ïë
‚ïë            Spider Ultimate - Êô∫ËÉΩWebÁà¨Ëô´Á≥ªÁªü                 ‚ïë
‚ïë              Version 2.10 - Pure Crawler                      ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`
	fmt.Println(banner)
}

func extractDomain(urlStr string) string {
	urlStr = strings.TrimPrefix(urlStr, "http://")
	urlStr = strings.TrimPrefix(urlStr, "https://")
	urlStr = strings.Split(urlStr, "/")[0]
	urlStr = strings.ReplaceAll(urlStr, ":", "_")
	return urlStr
}

// isInTargetDomain Ê£ÄÊü•URLÊòØÂê¶Â±û‰∫éÁõÆÊ†áÂüüÂêç
func isInTargetDomain(urlStr, targetDomain string) bool {
	// ÂøΩÁï•mailtoÁ≠âÁâπÊÆäÂçèËÆÆ
	if strings.HasPrefix(urlStr, "mailto:") || 
	   strings.HasPrefix(urlStr, "tel:") ||
	   strings.HasPrefix(urlStr, "javascript:") {
		return false
	}
	
	// ÊèêÂèñURLÁöÑÂüüÂêçÈÉ®ÂàÜ
	urlDomain := strings.TrimPrefix(urlStr, "http://")
	urlDomain = strings.TrimPrefix(urlDomain, "https://")
	urlDomain = strings.Split(urlDomain, "/")[0]
	urlDomain = strings.Split(urlDomain, ":")[0] // ÁßªÈô§Á´ØÂè£Âè∑
	
	// Ê∏ÖÁêÜÁõÆÊ†áÂüüÂêçÔºàÁßªÈô§Á´ØÂè£Âè∑Ôºâ
	cleanTargetDomain := strings.Split(targetDomain, ":")[0]
	cleanTargetDomain = strings.ReplaceAll(cleanTargetDomain, "_", ":") // extractDomain‰ºöÊõøÊç¢ÂÜíÂè∑
	
	// ÂÆåÂÖ®ÂåπÈÖç
	if urlDomain == cleanTargetDomain {
		return true
	}
	
	// Â≠êÂüüÂêçÂåπÈÖçÔºà‰æãÂ¶ÇÔºöapi.example.com ÂåπÈÖç example.comÔºâ
	if strings.HasSuffix(urlDomain, "."+cleanTargetDomain) {
		return true
	}
	
	return false
}

func saveResults(results []*core.Result, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	for _, result := range results {
		output := fmt.Sprintf("[GET] %s | Áä∂ÊÄÅÁ†Å: %d | Á±ªÂûã: %s\n", 
			result.URL, result.StatusCode, result.ContentType)
		file.WriteString(output)

		// ‰øùÂ≠òÂèëÁé∞ÁöÑÈìæÊé•
		if len(result.Links) > 0 {
			file.WriteString(fmt.Sprintf("  ÈìæÊé•Êï∞: %d\n", len(result.Links)))
		}

		// ‰øùÂ≠òË°®Âçï‰ø°ÊÅØ
		if len(result.Forms) > 0 {
			file.WriteString(fmt.Sprintf("  Ë°®ÂçïÊï∞: %d\n", len(result.Forms)))
			for _, form := range result.Forms {
				file.WriteString(fmt.Sprintf("    - %s %s\n", form.Method, form.Action))
			}
		}

		// ‰øùÂ≠òPOSTËØ∑Ê±Ç
		if len(result.POSTRequests) > 0 {
			file.WriteString(fmt.Sprintf("  POSTËØ∑Ê±ÇÊï∞: %d\n", len(result.POSTRequests)))
			for _, post := range result.POSTRequests {
				file.WriteString(fmt.Sprintf("    - [POST] %s\n", post.URL))
				if len(post.Parameters) > 0 {
					paramsJSON, _ := json.Marshal(post.Parameters)
					file.WriteString(fmt.Sprintf("      ÂèÇÊï∞: %s\n", string(paramsJSON)))
				}
			}
		}

		// ‰øùÂ≠òAPI
		if len(result.APIs) > 0 {
			file.WriteString(fmt.Sprintf("  APIÊï∞: %d\n", len(result.APIs)))
			for _, api := range result.APIs {
				file.WriteString(fmt.Sprintf("    - %s\n", api))
			}
		}

		file.WriteString("\n")
	}

	return nil
}

func saveURLs(results []*core.Result, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	urlSet := make(map[string]bool)
	
	// Ëé∑ÂèñÁõÆÊ†áÂüüÂêçÔºà‰ªéÁ¨¨‰∏Ä‰∏™ÁªìÊûúÁöÑURL‰∏≠ÊèêÂèñÔºâ
	var targetDomain string
	if len(results) > 0 {
		targetDomain = extractDomain(results[0].URL)
	}
	
	// Êî∂ÈõÜÊâÄÊúâURLÔºöÁà¨ÂèñÁöÑÈ°µÈù¢URL + ÂèëÁé∞ÁöÑÈìæÊé•
	for _, result := range results {
		// Ê∑ªÂä†È°µÈù¢URL
		if !urlSet[result.URL] && isInTargetDomain(result.URL, targetDomain) {
			file.WriteString(result.URL + "\n")
			urlSet[result.URL] = true
		}
		
		// Ê∑ªÂä†ÂèëÁé∞ÁöÑÊâÄÊúâÈìæÊé•ÔºàÂè™Ê∑ªÂä†ÁõÆÊ†áÂüüÂêçÁöÑÈìæÊé•Ôºâ
		for _, link := range result.Links {
			if !urlSet[link] && isInTargetDomain(link, targetDomain) {
				file.WriteString(link + "\n")
				urlSet[link] = true
			}
		}
	}

	return nil
}

// saveAllURLs ‰øùÂ≠òÊâÄÊúâÁ±ªÂûãÁöÑURLÂà∞‰∏çÂêåÊñá‰ª∂ÔºàÊñ∞Â¢ûÔºöÂ¢ûÂº∫ÁâàURL‰øùÂ≠òÔºâ
func saveAllURLs(results []*core.Result, baseFilename string) error {
	// Ëé∑ÂèñÁõÆÊ†áÂüüÂêç
	var targetDomain string
	if len(results) > 0 {
		targetDomain = extractDomain(results[0].URL)
	}
	
	// 1. ‰øùÂ≠òÊâÄÊúâURLÔºàÊúÄÂÆåÊï¥Ôºâ
	allURLs := make(map[string]bool)
	paramURLs := make(map[string]bool)
	apiURLs := make(map[string]bool)
	formURLs := make(map[string]bool)
	
	for _, result := range results {
		// Êî∂ÈõÜÁà¨ÂèñÁöÑÈ°µÈù¢URLÔºàÂè™‰øùÂ≠òÁõÆÊ†áÂüüÂêçÁöÑURLÔºâ
		if isInTargetDomain(result.URL, targetDomain) {
			allURLs[result.URL] = true
			
			if strings.Contains(result.URL, "?") {
				paramURLs[result.URL] = true
			}
		}
		
		// Êî∂ÈõÜÂèëÁé∞ÁöÑÈìæÊé•ÔºàÂè™‰øùÂ≠òÁõÆÊ†áÂüüÂêçÁöÑÈìæÊé•Ôºâ
		for _, link := range result.Links {
			if isInTargetDomain(link, targetDomain) {
				allURLs[link] = true
				if strings.Contains(link, "?") {
					paramURLs[link] = true
				}
			}
		}
		
		// Êî∂ÈõÜAPIÔºàÂè™‰øùÂ≠òÁõÆÊ†áÂüüÂêçÁöÑAPIÔºâ
		for _, api := range result.APIs {
			if isInTargetDomain(api, targetDomain) {
				allURLs[api] = true
				apiURLs[api] = true
			}
		}
		
		// Êî∂ÈõÜË°®ÂçïURLÔºàÂè™‰øùÂ≠òÁõÆÊ†áÂüüÂêçÁöÑË°®ÂçïURLÔºâ
		for _, form := range result.Forms {
			if form.Action != "" && isInTargetDomain(form.Action, targetDomain) {
				allURLs[form.Action] = true
				formURLs[form.Action] = true
			}
		}
	}
	
	// ‰øùÂ≠òÊâÄÊúâURLÂà∞‰∏ªÊñá‰ª∂
	if err := writeURLsToFile(allURLs, baseFilename+"_all_urls.txt"); err != nil {
		return fmt.Errorf("‰øùÂ≠òÂÖ®ÈÉ®URLÂ§±Ë¥•: %v", err)
	}
	
	// ‰øùÂ≠òÂ∏¶ÂèÇÊï∞ÁöÑURLÔºàÊñπ‰æøÂèÇÊï∞FuzzÔºâ
	if len(paramURLs) > 0 {
		if err := writeURLsToFile(paramURLs, baseFilename+"_params.txt"); err != nil {
			log.Printf("Ë≠¶Âëä: ‰øùÂ≠òÂèÇÊï∞URLÂ§±Ë¥•: %v", err)
		}
	}
	
	// ‰øùÂ≠òAPI URLÔºàÊñπ‰æøAPIÊµãËØïÔºâ
	if len(apiURLs) > 0 {
		if err := writeURLsToFile(apiURLs, baseFilename+"_apis.txt"); err != nil {
			log.Printf("Ë≠¶Âëä: ‰øùÂ≠òAPI URLÂ§±Ë¥•: %v", err)
		}
	}
	
	// ‰øùÂ≠òË°®ÂçïURLÔºàÊñπ‰æøË°®ÂçïÊµãËØïÔºâ
	if len(formURLs) > 0 {
		if err := writeURLsToFile(formURLs, baseFilename+"_forms.txt"); err != nil {
			log.Printf("Ë≠¶Âëä: ‰øùÂ≠òË°®ÂçïURLÂ§±Ë¥•: %v", err)
		}
	}
	
	// Êî∂ÈõÜPOSTËØ∑Ê±Ç
	postRequests := make([]*core.POSTRequest, 0)
	for _, result := range results {
		if len(result.POSTRequests) > 0 {
			for i := range result.POSTRequests {
				postRequests = append(postRequests, &result.POSTRequests[i])
			}
		}
	}
	
	// ‰øùÂ≠òPOSTËØ∑Ê±ÇÔºàÊñ∞Â¢ûÔºöÂ¢ûÂº∫ÁâàÔºâ
	if len(postRequests) > 0 {
		if err := savePOSTRequests(postRequests, baseFilename+"_post_requests.txt"); err != nil {
			log.Printf("Ë≠¶Âëä: ‰øùÂ≠òPOSTËØ∑Ê±ÇÂ§±Ë¥•: %v", err)
		}
	}
	
	// ÊâìÂç∞‰øùÂ≠òÁªüËÆ°
	fmt.Printf("\n[+] URL‰øùÂ≠òÂÆåÊàê:\n")
	fmt.Printf("  - %s_all_urls.txt  : %d ‰∏™URLÔºàÂÖ®ÈÉ®Ôºâ\n", baseFilename, len(allURLs))
	if len(paramURLs) > 0 {
		fmt.Printf("  - %s_params.txt    : %d ‰∏™URLÔºàÂ∏¶ÂèÇÊï∞Ôºâ\n", baseFilename, len(paramURLs))
	}
	if len(apiURLs) > 0 {
		fmt.Printf("  - %s_apis.txt      : %d ‰∏™URLÔºàAPIÊé•Âè£Ôºâ\n", baseFilename, len(apiURLs))
	}
	if len(formURLs) > 0 {
		fmt.Printf("  - %s_forms.txt     : %d ‰∏™URLÔºàË°®ÂçïÔºâ\n", baseFilename, len(formURLs))
	}
	if len(postRequests) > 0 {
		fmt.Printf("  - %s_post_requests.txt : %d ‰∏™POSTËØ∑Ê±Ç\n", baseFilename, len(postRequests))
	}
	
	return nil
}

// savePOSTRequests ‰øùÂ≠òPOSTËØ∑Ê±ÇÂà∞Êñá‰ª∂
func savePOSTRequests(requests []*core.POSTRequest, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()
	
	for i, req := range requests {
		if i > 0 {
			file.WriteString("\n")
		}
		
		// ÂÜôÂÖ•ËØ∑Ê±ÇÊñπÊ≥ïÂíåURL
		file.WriteString(fmt.Sprintf("%s %s\n", req.Method, req.URL))
		
		// ÂÜôÂÖ•Content-Type
		if req.ContentType != "" {
			file.WriteString(fmt.Sprintf("  Content-Type: %s\n", req.ContentType))
		}
		
		// ÂÜôÂÖ•ÂèÇÊï∞
		if len(req.Parameters) > 0 {
			file.WriteString("  Parameters:\n")
			// ÊéíÂ∫èÂèÇÊï∞Âêç‰ª•‰øùÊåÅ‰∏ÄËá¥ÊÄß
			paramNames := make([]string, 0, len(req.Parameters))
			for name := range req.Parameters {
				paramNames = append(paramNames, name)
			}
			sort.Strings(paramNames)
			
			for _, name := range paramNames {
				file.WriteString(fmt.Sprintf("    %s=%s\n", name, req.Parameters[name]))
			}
		}
		
		// ÂÜôÂÖ•ËØ∑Ê±Ç‰Ωì
		if req.Body != "" {
			file.WriteString("  Body: ")
			// Â¶ÇÊûúBodyÂ§™ÈïøÔºåÂè™ÊòæÁ§∫Ââç200‰∏™Â≠óÁ¨¶
			if len(req.Body) > 200 {
				file.WriteString(req.Body[:200] + "...\n")
			} else {
				file.WriteString(req.Body + "\n")
			}
		}
		
		// ÂÜôÂÖ•Êù•Ê∫ê‰ø°ÊÅØ
		if req.FromForm {
			file.WriteString(fmt.Sprintf("  From Form: %s\n", req.FormAction))
		}
	}
	
	return nil
}

// writeURLsToFile Â∞ÜURLÈõÜÂêàÂÜôÂÖ•Êñá‰ª∂
func writeURLsToFile(urls map[string]bool, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()
	
	// ËΩ¨Êç¢‰∏∫ÂàáÁâáÂπ∂ÊéíÂ∫èÔºàÊñπ‰æøÊü•ÁúãÂíåÂØπÊØîÔºâ
	urlList := make([]string, 0, len(urls))
	for url := range urls {
		urlList = append(urlList, url)
	}
	sort.Strings(urlList)
	
	// ÂÜôÂÖ•Êñá‰ª∂
	for _, url := range urlList {
		file.WriteString(url + "\n")
	}
	
	return nil
}

func printStats(results []*core.Result, elapsed time.Duration) {
	stats := map[string]int{
		"ÊÄªÈ°µÈù¢":     0,
		"ÊÄªÈìæÊé•":     0,
		"ÊÄªË°®Âçï":     0,
		"POSTËØ∑Ê±Ç":  0,
		"APIÊé•Âè£":   0,
		"Â∏¶ÂèÇÊï∞":     0,
		"ÈùôÊÄÅËµÑÊ∫ê":    0,
	}

	uniqueURLs := make(map[string]bool)
	totalLinks := 0
	totalForms := 0
	totalPOST := 0
	totalAPIs := 0

	for _, result := range results {
		uniqueURLs[result.URL] = true
		stats["ÊÄªÈ°µÈù¢"]++

		totalLinks += len(result.Links)
		totalForms += len(result.Forms)
		totalPOST += len(result.POSTRequests)
		totalAPIs += len(result.APIs)

		if strings.Contains(result.URL, "?") {
			stats["Â∏¶ÂèÇÊï∞"]++
		}

		// ÁÆÄÂçïÂà§Êñ≠ÈùôÊÄÅËµÑÊ∫ê
		ext := strings.ToLower(filepath.Ext(result.URL))
		if ext == ".js" || ext == ".css" || ext == ".jpg" || ext == ".png" || 
		   ext == ".gif" || ext == ".svg" || ext == ".woff" || ext == ".ttf" {
			stats["ÈùôÊÄÅËµÑÊ∫ê"]++
		}
	}

	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("                        Áà¨ÂèñÁªüËÆ°")
	fmt.Println(strings.Repeat("=", 60))
	fmt.Printf("Áà¨ÂèñÈ°µÈù¢Êï∞:    %d\n", stats["ÊÄªÈ°µÈù¢"])
	fmt.Printf("ÂîØ‰∏ÄURLÊï∞:     %d\n", len(uniqueURLs))
	fmt.Printf("ÂèëÁé∞ÈìæÊé•Êï∞:    %d\n", totalLinks)
	fmt.Printf("ÂèëÁé∞Ë°®ÂçïÊï∞:    %d\n", totalForms)
	fmt.Printf("POSTËØ∑Ê±ÇÊï∞:    %d\n", totalPOST)
	fmt.Printf("APIÊé•Âè£Êï∞:     %d\n", totalAPIs)
	fmt.Printf("Â∏¶ÂèÇÊï∞URL:     %d\n", stats["Â∏¶ÂèÇÊï∞"])
	fmt.Printf("ÈùôÊÄÅËµÑÊ∫ê:      %d\n", stats["ÈùôÊÄÅËµÑÊ∫ê"])
	fmt.Printf("ËÄóÊó∂:          %.2fÁßí\n", elapsed.Seconds())
	if elapsed.Seconds() > 0 {
		fmt.Printf("Âπ≥ÂùáÈÄüÂ∫¶:      %.2f È°µ/Áßí\n", float64(stats["ÊÄªÈ°µÈù¢"])/elapsed.Seconds())
	}
	fmt.Println(strings.Repeat("=", 60))
}

// printVersion ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
func printVersion() {
	fmt.Println("Spider Ultimate v2.10 - Pure Crawler Edition")
	fmt.Println("Build: 2025-10-25")
	fmt.Println("Go Version: " + strings.TrimPrefix(filepath.Base(os.Args[0]), "go"))
	fmt.Println("")
	fmt.Println("Features:")
	fmt.Println("  ‚úì ÈùôÊÄÅ+Âä®ÊÄÅÂèåÂºïÊìéÁà¨Ëô´")
	fmt.Println("  ‚úì AJAXËØ∑Ê±ÇÊã¶Êà™")
	fmt.Println("  ‚úì JavaScriptÊ∑±Â∫¶ÂàÜÊûê")
	fmt.Println("  ‚úì Ë∑®ÂüüJSÂàÜÊûêÔºà60+CDNÔºâ")
	fmt.Println("  ‚úì Êô∫ËÉΩË°®ÂçïËØÜÂà´")
	fmt.Println("  ‚úì URLÊ®°ÂºèÂéªÈáç üÜï")
	fmt.Println("  ‚úì ‰∏öÂä°ÊÑüÁü•ËøáÊª§ üÜï")
	fmt.Println("  ‚úì DOMÁõ∏‰ººÂ∫¶Ê£ÄÊµã")
	fmt.Println("  ‚úì ÊäÄÊúØÊ†àÊ£ÄÊµã")
	fmt.Println("  ‚úì ÊïèÊÑü‰ø°ÊÅØÊ£ÄÊµã")
	fmt.Println("  ‚úì ÁªìÊûÑÂåñÊó•ÂøóÁ≥ªÁªü")
	fmt.Println("  ‚úì PipelineÊîØÊåÅ")
	fmt.Println("")
	fmt.Println("Positioning: Pure Web Crawler - Focus on URL Discovery")
	fmt.Println("GitHub: https://github.com/Warren-Jace/gogospider")
}

// handleStdinMode Â§ÑÁêÜ stdin Ê®°ÂºèÔºàv2.6 Êñ∞Â¢ûÔºåÂÄüÈâ¥ HakrawlerÔºâ
func handleStdinMode() {
	// ‰ªé stdin ËØªÂèñ URL
	scanner := bufio.NewScanner(os.Stdin)
	urlCount := 0
	
	for scanner.Scan() {
		url := strings.TrimSpace(scanner.Text())
		if url == "" {
			continue
		}
		
		urlCount++
		
		// ‰∏∫ÊØè‰∏™ URL ÂàõÂª∫ÈÖçÁΩÆ
		cfg := config.NewDefaultConfig()
		cfg.TargetURL = url
		
		if maxDepth != 3 {
			cfg.DepthSettings.MaxDepth = maxDepth
		}
		if logLevel != "info" {
			cfg.LogSettings.Level = strings.ToUpper(logLevel)
		}
		// ÂèÇÊï∞ÁàÜÁ†¥ÂäüËÉΩÂ∑≤ÁßªÈô§
		// if enableFuzzing {
		// 	cfg.StrategySettings.EnableParamFuzzing = true
		// }
		if proxy != "" {
			cfg.AntiDetectionSettings.Proxies = []string{proxy}
		}
		
		// È™åËØÅÈÖçÁΩÆ
		if err := cfg.Validate(); err != nil {
			if !simpleMode {
				log.Printf("ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥• %s: %v", url, err)
			}
			continue
		}
		
		// üîß ‰øÆÂ§çÔºöÂàõÂª∫Áà¨Ëô´ÂêéÁ´ãÂç≥ÂÖ≥Èó≠ÔºåÈÅøÂÖçËµÑÊ∫êÊ≥ÑÊºè
		func() {
			spider := core.NewSpider(cfg)
			defer spider.Close() // Âú®ÂåøÂêçÂáΩÊï∞ÁªìÊùüÊó∂Á´ãÂç≥ÂÖ≥Èó≠
			
			// Áà¨Âèñ
			err := spider.Start(url)
			if err != nil && !simpleMode {
				log.Printf("Áà¨ÂèñÂ§±Ë¥• %s: %v", url, err)
				return
			}
			
			// Ëé∑ÂèñÁªìÊûú
			results := spider.GetResults()
			
			// ÁÆÄÊ¥ÅÊ®°ÂºèÔºöÂè™ËæìÂá∫ URL
			if simpleMode {
				for _, result := range results {
					fmt.Println(result.URL)
				}
			} else {
				// Ê≠£Â∏∏Ê®°ÂºèÔºöÊòæÁ§∫ÁªüËÆ°
				fmt.Printf("[%d] %s - ÂèëÁé∞ %d ‰∏™ÁªìÊûú\n", urlCount, url, len(results))
			}
		}()
	}
	
	if err := scanner.Err(); err != nil {
		log.Fatalf("ËØªÂèñËæìÂÖ•Â§±Ë¥•: %v", err)
	}
	
	if !simpleMode {
		fmt.Printf("\nÊÄªËÆ°Â§ÑÁêÜ %d ‰∏™URL\n", urlCount)
	}
}

// handleOutputFormat Â§ÑÁêÜËæìÂá∫Ê†ºÂºèÔºàv2.6 Êñ∞Â¢ûÔºåÂÄüÈâ¥ KatanaÔºâ
func handleOutputFormat(results []*core.Result) {
	switch outputFormat {
	case "json":
		// JSON Ê†ºÂºèËæìÂá∫
		output := map[string]interface{}{
			"version": "2.6",
			"timestamp": time.Now().Format(time.RFC3339),
			"total": len(results),
			"results": results,
		}
		data, err := json.MarshalIndent(output, "", "  ")
		if err != nil {
			log.Printf("JSON ÁºñÁ†ÅÂ§±Ë¥•: %v", err)
			return
		}
		fmt.Println(string(data))
		
	case "urls-only":
		// Âè™ËæìÂá∫ URLÔºàÂéªÈáçÔºâ
		urlSet := make(map[string]bool)
		for _, result := range results {
			if !urlSet[result.URL] {
				fmt.Println(result.URL)
				urlSet[result.URL] = true
			}
			// ‰πüËæìÂá∫ÂèëÁé∞ÁöÑÈìæÊé•
			for _, link := range result.Links {
				if !urlSet[link] {
					fmt.Println(link)
					urlSet[link] = true
				}
			}
		}
		
	case "text":
		// ÈªòËÆ§ÊñáÊú¨Ê†ºÂºèÔºàÂ∑≤ÁªèÂú®ÂâçÈù¢Â§ÑÁêÜÔºâ
		// ‰∏çÈúÄË¶ÅÈ¢ùÂ§ñÊìç‰Ωú
	}
}

// loadConfigFile Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂Ôºàv2.9Êñ∞Â¢ûÔºâ
func loadConfigFile(filename string) (*config.Config, error) {
	// ËØªÂèñÊñá‰ª∂
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("ËØªÂèñÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: %v", err)
	}
	
	// Ëß£ÊûêJSON
	var cfg config.Config
	if err := json.Unmarshal(data, &cfg); err != nil {
		return nil, fmt.Errorf("Ëß£ÊûêÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: %v", err)
	}
	
	// È™åËØÅÈÖçÁΩÆ
	if err := cfg.ValidateAndFix(); err != nil {
		return nil, fmt.Errorf("ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•: %v", err)
	}
	
	return &cfg, nil
}
